type: edu
custom_name: stage6
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                    "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                    "should contain \"gets 100 VC\"");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                    "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/core/Block.java
  visible: true
  text: |
    package blockchain;

    import java.util.List;

    public class Block implements AutoCloseable {

        private long id;
        private String minerId;
        private String difficultyChange;
        private long timeStamp;
        private long miningTime; // In milliseconds
        private long nonce;
        private String previousBlockHash;
        private String currentBlockHash;
        private List<String> messages;
        private String minerPublicKey;
        private String encryptedBlockHash;

        Block() {
        }

        public List<String> getMessages() {
            return messages;
        }

        public Block setMessages(List<String> messages) {
            this.messages = messages;
            return this;
        }

        public String getMinerPublicKey() {
            return minerPublicKey;
        }

        public String getEncryptedBlockHash() {
            return encryptedBlockHash;
        }

        public void setMinerPublicKey(String minerPublicKey) {
            this.minerPublicKey = minerPublicKey;
        }

        public void setEncryptedBlockHash(String encryptedBlockHash) {
            this.encryptedBlockHash = encryptedBlockHash;
        }

        public Block setMinerId(String minerId) {
            this.minerId = minerId;
            return this;
        }

        public synchronized Block setDifficultyTarget(String difficultyChange) {
            this.difficultyChange = difficultyChange;
            return this;
        }

        public long getId() {
            return id;
        }

        public Block setId(long id) {
            this.id = id;
            return this;
        }

        public long getTimeStamp() {
            return timeStamp;
        }

        public synchronized Block setTimeStamp(long timeStamp) {
            this.timeStamp = timeStamp;
            return this;
        }

        public String getPreviousBlockHash() {
            return previousBlockHash;
        }

        public synchronized Block setPreviousBlockHash(String previousBlockHash) {
            this.previousBlockHash = previousBlockHash;
            return this;
        }

        public String getCurrentBlockHash() {
            return currentBlockHash;
        }

        public long getMiningTime() {
            return miningTime;
        }

        public synchronized Block setMiningTime(long miningTime) {
            this.miningTime = miningTime;
            return this;
        }

        public long getNonce() {
            return nonce;
        }

        public synchronized Block setNonce(long nonce) {
            this.nonce = nonce;
            return this;
        }

        public Block calculateHash() {
            currentBlockHash = StringUtil.applySha256(String.valueOf(id)
                                                            .concat(String.valueOf(timeStamp))
                                                            .concat(previousBlockHash)
                                                            .concat(String.valueOf(nonce))
                                                            .concat(StringUtil.formatMessages(messages)));
            return this;
        }

        @Override
        public String toString() {
            return String.format("Block:\n" +
                                     "Created by miner # %s\n" +
                                     //"Miners public key: %s \n" +
                                     // "Encrypted block hash: %s \n" +
                                     "Id: %s\n" +
                                     "Timestamp: %s\n" +
                                     "Magic number: %s\n" +
                                     "Hash of the previous block:\n%s\n" +
                                     "Hash of the block:\n%s\n" +
                                     "Block data:\n%s\n" +
                                     "Block was generating for %s seconds\n" +
                                     "%s\n\n",
                                 minerId,
                                 // minerPublicKey == null ? "<empty>" : minerPublicKey,
                                 // encryptedBlockHash == null ? "<empty>" : minerPublicKey,
                                 id,
                                 timeStamp,
                                 nonce,
                                 previousBlockHash,
                                 currentBlockHash,
                                 StringUtil.formatMessages(messages),
                                 miningTime / 1000,
                                 difficultyChange);
        }

        @Override
        public void close() throws Exception {
        }
    }
  learner_created: true
- name: src/blockchain/core/Blockchain.java
  visible: true
  text: |
    package blockchain;

    import java.io.UnsupportedEncodingException;
    import java.security.InvalidKeyException;
    import java.security.spec.InvalidKeySpecException;
    import java.util.Arrays;
    import java.util.Date;
    import java.util.LinkedList;
    import java.util.List;
    import javax.crypto.BadPaddingException;
    import javax.crypto.IllegalBlockSizeException;

    public class Blockchain implements AutoCloseable {
        private static Blockchain blockchain;
        private final String genesis = "The Times 03/Jan/2009 Chancellor on brink of second bailout for banks";
        private long blockIndexNumber = 0; // Latest block index
        private int difficultyTarget = 0; // Amount of zeros is hash prefix
        private int[] targetNewBlockTimeInterval = {1000, 1001}; // Generate new block between 1 and 2 seconds
        private String hashIndex;
        private LinkedList<Block> chainOfBlocks = new LinkedList();
        private List<String> dataMessages = new LinkedList<>(); // Data messages to add to a block

        private Blockchain() {
            Block genesisBlock = new Block().setId(1L)
                                            .setPreviousBlockHash("0")
                                            .setNonce(0)
                                            .setMinerId("0")
                                            .setTimeStamp(new Date().getTime())
                                            .setMessages(Arrays.asList(genesis))
                                            .calculateHash();
            if (!addNextBlock(genesisBlock)) {
                throw new IllegalStateException("Blockchain was not initialized and is in failed state!");
            }
        }

        private boolean validateBlocksSignature(Block block) throws UnsupportedEncodingException,
                                                                IllegalBlockSizeException,
                                                                BadPaddingException,
                                                                InvalidKeySpecException,
                                                                InvalidKeyException {
            return CryptoSecurity.decryptText(block.getEncryptedBlockHash(), block.getMinerPublicKey())
                                 .equals(block.getCurrentBlockHash());
        }

        public static Blockchain getInstance() {
            if (blockchain == null) {
                blockchain = new Blockchain();
            }
            return blockchain;
        }

        public List<String> getDataMessages() {
            return dataMessages;
        }

        public String getHashIndex() {
            return hashIndex;
        }

        public int getDifficultyTarget() {
            return difficultyTarget;
        }

        public long getBlockIndexNumber() {
            return blockIndexNumber;
        }

        public synchronized void addMessage(String message) {
            dataMessages.add(message != null ? message : "");
        }

        public synchronized boolean addNextBlock(Block block) {
            if (isNewBlockValid(block)) {
                if (block.getMiningTime() > targetNewBlockTimeInterval[1]) {
                    difficultyTarget--;
                    block.setDifficultyTarget("N was decreased by 1");
                } else if (block.getMiningTime() < targetNewBlockTimeInterval[0]) {
                    difficultyTarget++;
                    block.setDifficultyTarget("N was increased to " + difficultyTarget);
                } else {
                    block.setDifficultyTarget("N stays the same");
                }
                chainOfBlocks.add(block);
                hashIndex = block.getCurrentBlockHash();
                dataMessages = new LinkedList<>();
                blockIndexNumber++;
                return true;
            } else {
                return false;
            }
        }

        public boolean isNewBlockValid(Block block) {
            String hash = StringUtil.generateBlockHash(block);
            try {
                if (block.getId() > 1 && !validateBlocksSignature(block)) {
                    System.out.println("Block signature is wrong. Block is rejected.");
                    return false;
                }
            } catch (UnsupportedEncodingException
                | IllegalBlockSizeException
                | BadPaddingException
                | InvalidKeySpecException
                | InvalidKeyException e) {
                e.printStackTrace();
                return false;
            } catch (NullPointerException e) {
                return false;
            }

            if (block.getId() == blockIndexNumber + 1 &&
                hash.equals(block.getCurrentBlockHash()) &&
                (difficultyTarget == 0 || hash.substring(0, difficultyTarget).matches("[0]+"))) {
                return true;
            } else {
                return false;
            }
        }

        public boolean validateBlockchain() {
            Block index = chainOfBlocks.getFirst();
            for (int i = 1; i < chainOfBlocks.size(); i++) {
                String hashOriginal = StringUtil.generateBlockHash(index);
                if (!hashOriginal.equals(chainOfBlocks.get(i).getPreviousBlockHash())) {
                    System.out.println("Blockchain is invalid or corrupted.");
                    return false;
                }
                index = chainOfBlocks.get(i);
            }
            return true;
        }

        @Override
        public String toString() {
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < chainOfBlocks.size(); i++) {
                Block index = chainOfBlocks.get(i);
                result.append(index.toString());
            }
            return result.toString();
        }

        @Override
        public void close() throws Exception {

        }
    }
  learner_created: true
- name: src/blockchain/core/Transaction.java
  visible: true
  learner_created: true
- name: src/blockchain/utils/CryptoSecurity.java
  visible: true
  text: |
    package blockchain;

    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.UnsupportedEncodingException;
    import java.security.InvalidKeyException;
    import java.security.KeyFactory;
    import java.security.KeyPair;
    import java.security.KeyPairGenerator;
    import java.security.NoSuchAlgorithmException;
    import java.security.PrivateKey;
    import java.security.PublicKey;
    import java.security.spec.InvalidKeySpecException;
    import java.security.spec.PKCS8EncodedKeySpec;
    import java.security.spec.X509EncodedKeySpec;
    import java.util.Base64;
    import javax.crypto.BadPaddingException;
    import javax.crypto.Cipher;
    import javax.crypto.IllegalBlockSizeException;
    import javax.crypto.NoSuchPaddingException;

    public class CryptoSecurity {

        private static final int keyLength = 4096;
        private static final String encoding = "UTF-8";
        private static final String algorithm = "RSA";
        private static Cipher cipher;
        private static KeyPairGenerator keyGen;
        private static KeyFactory keyFactory;
        private KeyPair pair;
        private PrivateKey privateKey;
        private PublicKey publicKey;

        static {
            try {
                keyGen = KeyPairGenerator.getInstance(algorithm);
                keyGen.initialize(keyLength);
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }

            try {
                cipher = Cipher.getInstance(algorithm);
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            } catch (NoSuchPaddingException e) {
                e.printStackTrace();
            }

            try {
                keyFactory = KeyFactory.getInstance(algorithm);
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }
        }

        public CryptoSecurity() throws NoSuchAlgorithmException, NoSuchPaddingException {
            this.pair = keyGen.generateKeyPair();
            this.privateKey = pair.getPrivate();
            this.publicKey = pair.getPublic();
        }

        public byte[] getPublicKey() throws InvalidKeySpecException {
            return keyFactory.getKeySpec(publicKey,
                                         X509EncodedKeySpec.class).getEncoded();
        }

        public String encryptText(String msg)
            throws UnsupportedEncodingException, IllegalBlockSizeException,
            BadPaddingException, InvalidKeyException {
            this.cipher.init(Cipher.ENCRYPT_MODE, privateKey);
            return Base64.getEncoder().encodeToString(cipher.doFinal(msg.getBytes(encoding)));
        }

        public String decryptText(String msg)
            throws InvalidKeyException, UnsupportedEncodingException,
            IllegalBlockSizeException, BadPaddingException {
            this.cipher.init(Cipher.DECRYPT_MODE, publicKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(msg)), encoding);
        }

        public static String encryptText(String msg, String private_key)
            throws UnsupportedEncodingException, IllegalBlockSizeException,
            BadPaddingException, InvalidKeyException, InvalidKeySpecException {

            if (msg == null || private_key == null) {
                throw new NullPointerException(msg == null ? "Message to encrypt is null" : "Private key is null");
            }

            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(private_key));
            cipher.init(Cipher.ENCRYPT_MODE, keyFactory.generatePrivate(keySpec));
            return Base64.getEncoder().encodeToString(cipher.doFinal(msg.getBytes(encoding)));
        }

        public static void validatePublicKey(String key) throws InvalidKeySpecException, InvalidKeyException {
            byte[] encodedKey = Base64.getDecoder().decode(key.getBytes());
            X509EncodedKeySpec keySpec = new X509EncodedKeySpec(encodedKey);
            cipher.init(Cipher.DECRYPT_MODE, keyFactory.generatePublic(keySpec));
        }

        public static String decryptText(String msg, String public_key)
                                                    throws InvalidKeyException, UnsupportedEncodingException,
                                                            IllegalBlockSizeException, BadPaddingException,
                                                            InvalidKeySpecException {

            if (msg == null || public_key == null) {
                throw new NullPointerException(msg == null ? "Message to decrypt is null" : "Private key is null");
            }
            byte[] encodedKey = Base64.getDecoder().decode(public_key.getBytes());
            X509EncodedKeySpec keySpec = new X509EncodedKeySpec(encodedKey);
            cipher.init(Cipher.DECRYPT_MODE, keyFactory.generatePublic(keySpec));
            return new String(cipher.doFinal(Base64.getDecoder().decode(msg)), encoding);
        }

        public void writeToFile(String path, byte[] key) throws IOException {
            File f = new File(path);
            f.getParentFile().mkdirs();

            FileOutputStream fos = new FileOutputStream(f);
            fos.write(key);
            fos.flush();
            fos.close();
        }
    }
  learner_created: true
- name: src/blockchain/client/Miner.java
  visible: true
  text: |
    package blockchain;

    import java.io.UnsupportedEncodingException;
    import java.security.InvalidKeyException;
    import java.security.NoSuchAlgorithmException;
    import java.security.spec.InvalidKeySpecException;
    import java.util.Base64;
    import java.util.Date;
    import java.util.UUID;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Future;
    import javax.crypto.BadPaddingException;
    import javax.crypto.IllegalBlockSizeException;
    import javax.crypto.NoSuchPaddingException;

    public class Miner {

        private Blockchain blockchain;
        private Future<?> executor;
        private boolean exit = false;
        private String uid;
        private CryptoSecurity security;

        public Miner(Blockchain chain) {
            blockchain = chain;
            uid = UUID.randomUUID().toString();
            try {
                security = new CryptoSecurity();
            } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
                System.out.println("Failed to initialize miner encryption object.");
                e.printStackTrace();
            }
        }

        public String getPublicKey() throws InvalidKeySpecException, InvalidKeyException {
            String key = Base64.getEncoder()
                               .withoutPadding()
                               .encodeToString(security.getPublicKey());
            CryptoSecurity.validatePublicKey(key);
            return key;
        }

        public String getUid() {
            return uid;
        }

        public Future<?> getExecutor() {
            return executor;
        }

        public boolean addBlockToBlockchain(Block block) {
            return blockchain.addNextBlock(block);
        }

        public Block generateNewBlock() throws UnsupportedEncodingException,
            IllegalBlockSizeException,
            BadPaddingException,
            InvalidKeyException, InvalidKeySpecException {
            int difficulty = blockchain.getDifficultyTarget();
            long indexId = blockchain.getBlockIndexNumber() + 1;
            Block block = new Block().setId(indexId)
                                     .setPreviousBlockHash(blockchain.getHashIndex())
                                     .setNonce(0L)
                                     .setMinerId(uid)
                                     .setTimeStamp(new Date().getTime())
                                     .setMessages(blockchain.getDataMessages())
                                     .calculateHash();
            Date start = new Date();
            while (!block.getCurrentBlockHash()
                         .substring(0, difficulty)
                         .matches("[0]+")) {

                mineNewBlocksHash(block);
                if (blockchain.getBlockIndexNumber() == indexId) {
                    start = new Date();
                    indexId = blockchain.getBlockIndexNumber() + 1;
                    difficulty = blockchain.getDifficultyTarget();
                    reinitializeBlock(block);
                }

                if (exit == true) {
                    throw new RuntimeException("Miner was stopped.");
                }
            }
            Date end = new Date();
            block.setMiningTime(end.getTime() - start.getTime());
            block.setEncryptedBlockHash(security.encryptText(block.getCurrentBlockHash()));
            block.setMinerPublicKey(getPublicKey());
            return block;
        }

        private Block reinitializeBlock(Block block) {
            return block.setId(blockchain.getBlockIndexNumber() + 1)
                        .setPreviousBlockHash(blockchain.getHashIndex())
                        .setNonce(0L)
                        .setMinerId(uid)
                        .setTimeStamp(new Date().getTime())
                        .setMessages(blockchain.getDataMessages())
                        .calculateHash();
        }

        private String mineNewBlocksHash(Block block) {
            return block.setNonce(block.getNonce() + 1)
                        .calculateHash()
                        .getCurrentBlockHash();
        }

        public Object stop() {
            this.exit = true;
            return this;
        }

        public Future<?> start(ExecutorService executor) {
            this.executor = executor.submit(() -> {
                // try {
                //     System.out.format("Running thread: %s, with UID %s, pub key %s \n\n", Thread.currentThread().getName(),
                //                      uid, getPublicKey());
                // } catch (InvalidKeySpecException | InvalidKeyException e) {
                //     e.printStackTrace();
                // }

                while (exit != true) {
                    try (Block block = generateNewBlock()) {
                        if (blockchain.getDataMessages().size() > 10) {
                            addBlockToBlockchain(block);
                        }
                    } catch (Exception e) {
                        //System.out.println("Miner " + uid + " was stopped");
                    }
                }
            });
            return this.executor;
        }
    }
  learner_created: true
- name: src/blockchain/core/CryptoWallet.java
  visible: true
  learner_created: true
- name: src/blockchain/core/ShadowBalance.java
  visible: true
  learner_created: true
- name: src/blockchain/utils/CryptoUtils.java
  visible: true
  text: |-
    package blockchain;

    import java.security.MessageDigest;
    import java.util.List;
    import java.util.Random;
    import java.util.stream.Collectors;

    class StringUtil {

        public static Random random = new Random();

        public static String formatMessages(List<String> messages) {
            return messages.stream()
                           .collect(Collectors.joining("\n"));
        }

        public static String generateBlockHash(Block block) {
            return StringUtil.applySha256(String.valueOf(block.getId())
                                                .concat(String.valueOf(block.getTimeStamp()))
                                                .concat(block.getPreviousBlockHash())
                                                .concat(String.valueOf(block.getNonce()))
                                                .concat(formatMessages(block.getMessages())));
        }

        public static String generateRandomString(int length) {
            return random.ints('A', 'z')
                         .limit(30)
                         .collect(StringBuilder::new,
                                  StringBuilder::appendCodePoint,
                                  StringBuilder::append)
                         .toString();
        }

        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input) {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem : hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if (hex.length() == 1) {
                        hexString.append('0');
                    }
                    hexString.append(hex);
                }
                return hexString.toString();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/276/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 12 May 2021 20:35:24 UTC
record: -1
