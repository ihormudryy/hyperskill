type: edu
custom_name: Party time!
files:
- name: src/splitter/Main.java
  visible: true
  text: |
    package splitter;

    public class Main {

        public static void main(String[] args) {

            System.out.println("Hello World");
        }
    }
  learner_created: false
- name: ./build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.3.3.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    //sourceCompatibility = '14'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'com.h2database:h2'
        compileOnly "org.projectlombok:lombok:1.18.22"
    }
  learner_created: true
- name: src/resources/application.properties
  visible: true
  text: |
    spring.main.banner-mode=off
    spring.main.web-application-type=NONE
    logging.level.root=error
    spring.datasource.url=jdbc:h2:file:./testDB.mv.db
    spring.batch.job.enabled=true
    spring.datasource.driverClassName=org.h2.Driver
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.show-sql=false
    spring.h2.console.enabled=false
  learner_created: true
- name: src/splitter/db/UserModel.java
  visible: true
  text: |
    package splitter.db;

    import java.io.Serializable;
    import java.util.ArrayList;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Set;
    import javax.persistence.CascadeType;
    import javax.persistence.Column;
    import javax.persistence.Entity;
    import javax.persistence.FetchType;
    import javax.persistence.GeneratedValue;
    import javax.persistence.Id;
    import javax.persistence.JoinColumn;
    import javax.persistence.OneToMany;
    import javax.persistence.Table;

    @Entity
    @Table(name = "users")
    public class UserModel implements Serializable {

        private static final long serialVersionUID = 5552347547269388327L;
        @OneToMany(fetch = FetchType.EAGER,
            cascade = CascadeType.REMOVE)
        @JoinColumn(name = "UserID")
        public List<TransactionModel> transactions = new ArrayList<>();
        @Id
        @Column(name = "UserID")
        @GeneratedValue
        private Long id;
        private String name;

        public UserModel(String name) {
            this.name = name;
            this.transactions = new ArrayList<>();
        }

        public UserModel() {

        }

        public String getName() {
            return name;
        }

        public List<TransactionModel> getTransactions() {
            return transactions;
        }

        public Long getId() {
            return id;
        }
    }
  learner_created: true
- name: src/splitter/utils/CmdUtils.java
  visible: true
  text: |
    package splitter.utils;

    import static splitter.utils.CmdUtils.Actions.BALANCE;
    import static splitter.utils.CmdUtils.Actions.BORROW;
    import static splitter.utils.CmdUtils.Actions.CASHBACK;
    import static splitter.utils.CmdUtils.Actions.EXIT;
    import static splitter.utils.CmdUtils.Actions.GROUP;
    import static splitter.utils.CmdUtils.Actions.HELP;
    import static splitter.utils.CmdUtils.Actions.PURCHASE;
    import static splitter.utils.CmdUtils.Actions.REPAY;
    import static splitter.utils.CmdUtils.Actions.SECRET_SANTA;
    import static splitter.utils.CmdUtils.Actions.WRITE_OFF;

    import java.math.BigDecimal;
    import java.math.RoundingMode;
    import java.text.ParseException;
    import java.time.LocalDate;
    import java.time.format.DateTimeFormatter;
    import java.util.Arrays;
    import java.util.Collections;
    import java.util.Comparator;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Map;
    import java.util.Objects;
    import java.util.Optional;
    import java.util.Scanner;
    import java.util.Set;
    import java.util.concurrent.atomic.AtomicBoolean;
    import java.util.stream.Collectors;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.boot.CommandLineRunner;
    import org.springframework.stereotype.Component;
    import splitter.db.UserModel;
    import splitter.regex.RegexPatterns;
    import splitter.service.DbService;

    @Component
    public class CmdUtils implements CommandLineRunner {

        public static List<String> commands = List.of("balance",
                                                      "borrow",
                                                      "exit",
                                                      "help",
                                                      "repay",
                                                      "group",
                                                      "writeOff",
                                                      "cashBack",
                                                      "secretSanta",
                                                      "purchase");
        public static DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy.MM.dd");
        public final DbService dbService;

        @Autowired
        public CmdUtils(DbService dbService) {
            this.dbService = dbService;
        }

        public static List<String> parseCommandLineArguments(String line, RegexPatterns.args pattern) throws IllegalArgumentException {
            if (!line.matches(pattern.command)) {
                throw new IllegalArgumentException("Illegal command arguments");
            }
            return pattern.getMatches(line);
        }

        private static LocalDate parseDateOrReturnCurrentTime(boolean isCurrent, String date) {
            return isCurrent ? LocalDate.now() : LocalDate.parse(date, dateFormatter);
        }

        public void processSecretSanta(String line, RegexPatterns.args secretSanta) {
            List<String> args = parseCommandLineArguments(line, secretSanta);
            List<UserModel> givers = dbService.getUsersFromGroup(args.get(1));
            Map<String, Boolean> takers = dbService.getUsersFromGroup(args.get(1))
                                                      .stream()
                                                      .collect(Collectors.toMap(UserModel::getName, e -> Boolean.FALSE));
            givers.stream()
                .map(user -> {
                    Optional<String> taker = Optional.empty();
                    while(taker.isEmpty()) {
                        int i = (int)(Math.random() * (takers.size()));
                        String t = givers.get(i).getName();
                        if (givers.size() == 1 || (takers.get(t).equals(Boolean.FALSE) && !user.getName().equals(t))) {
                            taker = Optional.of(t);
                            takers.put(t, Boolean.TRUE);
                        }
                    }
                    return String.format(user.getName() + " gift to %s", taker.get());
                }).sorted(Comparator.reverseOrder())
                .forEach(System.out::println);
        }

        public void processCashback(String line, RegexPatterns.args cashback) {
            List<String> args = parseCommandLineArguments(line, cashback);
            int size = args.size();
            List<String> usersAndGroups = Arrays.stream(RegexPatterns.args.USERS.getMatchedResults(line)
                                                                                .get(0)
                                                                                .replaceAll("[\\(\\),]", "")
                                                                                .split("\\s+"))
                                                .collect(Collectors.toList());
            String fromUser = args.get(args.get(0).equals("purchase") ? 1 : 2);
            BigDecimal amount = new BigDecimal(RegexPatterns.args.AMOUNT.getMatchedResults(line)
                                                                        .get(0).trim());
            LocalDate date = parseDateOrReturnCurrentTime(size < 6, args.get(0));
            Set<String> includedUsersList = buildListOfIncludedUsers(usersAndGroups, Set.of());
            BigDecimal sum = new BigDecimal(amount.doubleValue() / includedUsersList.size())
                .setScale(2, RoundingMode.DOWN);
            includedUsersList
                .stream()
                .filter(u -> !u.equals(fromUser))
                .sorted()
                .forEach(toUser -> {
                    dbService.processTransactionInDb(date, sum.doubleValue(), toUser, fromUser);
                });
        }

        public void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            while (true) {
                try {
                    String line = scanner.nextLine();
                    if (line.equals(HELP.toString())) {
                        CmdUtils.commands.stream().sorted().forEach(System.out::println);
                        continue;
                    }
                    if (line.contains(BORROW.toString())) {
                        processTransaction(line, RegexPatterns.args.BORROW, BORROW);
                        continue;
                    }
                    if (line.contains(REPAY.toString())) {
                        processTransaction(line, RegexPatterns.args.REPAY, REPAY);
                        continue;
                    }
                    if (line.contains(BALANCE.toString())) {
                        printBalances(line, RegexPatterns.args.BALANCE);
                        continue;
                    }
                    if (line.contains(GROUP.toString())) {
                        processGroup(line, RegexPatterns.args.GROUP);
                        continue;
                    }
                    if (line.contains(PURCHASE.toString())) {
                        processPurchase(line, RegexPatterns.args.PURCHASE);
                        continue;
                    }
                    if (line.contains(WRITE_OFF.toString())) {
                        processWriteOff(line, RegexPatterns.args.WRITE_OFF);
                        continue;
                    }
                    if (line.contains(SECRET_SANTA.toString())) {
                        processSecretSanta(line, RegexPatterns.args.SECRET_SANTA);
                        continue;
                    }
                    if (line.contains(CASHBACK.toString())) {
                        processCashback(line, RegexPatterns.args.CASHBACK);
                        continue;
                    }
                    if (line.contains(PURCHASE.toString())) {
                        processPurchase(line, RegexPatterns.args.PURCHASE);
                        continue;
                    }
                    if (line.equals(EXIT.toString())) {
                        return;
                    }
                    System.out.println("Unknown command. Print help to show commands list");
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                } catch (ParseException e) {
                    e.printStackTrace();
                } catch (Exception e) {}
            }
        }

        public void processTransaction(String line, RegexPatterns.args pattern, CmdUtils.Actions action) throws ParseException {
            List<String> args = parseCommandLineArguments(line, pattern);
            int size = args.size();
            var toUser = args.get(size - 3);
            var fromUser = args.get(size - 2);
            var amount = Double.parseDouble(args.get(size - 1));
            var date = parseDateOrReturnCurrentTime(size < 5, args.get(0));
            dbService.processTransactionInDb(date, action.equals(CmdUtils.Actions.REPAY) ? -1 * amount : amount, toUser, fromUser);
            dbService.processTransactionInDb(date, action.equals(CmdUtils.Actions.REPAY) ? amount : -1 * amount, fromUser, toUser);
        }

        public void printBalances(String line, RegexPatterns.args pattern) throws ParseException {
            List<String> args = parseCommandLineArguments(line, pattern);
            int size = args.size();
            var command = args.get(size - 1);
            var date = parseDateOrReturnCurrentTime(size < 3 && !command.equals("balance"), args.get(0));
            var repayments = new AtomicBoolean(false);
            List<String> result = dbService.getAllUsers()
                                           .stream()
                                           .flatMap(k -> k.getTransactions().stream())
                                           .filter(e -> dbService.getBalanceWithBorrower(e, date, command.contains("open"))
                                                                 .setScale(2, RoundingMode.DOWN)
                                                                 .compareTo(BigDecimal.ZERO) == 1)
                                           .map(b -> {
                                               BigDecimal balance = dbService.getBalanceWithBorrower(b, date, command.contains("open"));
                                               repayments.set(true);
                                               return String.format("%s owes %s %.2f", b.getFromUser(),
                                                                    b.getToUser(),
                                                                    balance.doubleValue());
                                           }).distinct().collect(Collectors.toList());
            Collections.sort(result);
            result.stream().forEach(System.out::println);
            if (repayments.get() == false) {
                System.out.println("No repayments");
            }
        }

        public void processGroup(String line, RegexPatterns.args pattern) {
            List<String> args = parseCommandLineArguments(line, pattern);
            String command = args.get(1);
            String groupName = args.get(2);
            if (command.equals("show")) {
                dbService.getGroupByName(groupName).orElseThrow(() -> new IllegalArgumentException("Unknown group"));
                if (dbService.getGroupByName(groupName).get().getUsers().isEmpty()) {
                    throw new IllegalArgumentException("Group is empty");
                }
                dbService.getGroupByName(groupName)
                         .get().getUsers()
                         .stream()
                         .distinct()
                         .map(e -> e.getName())
                         .sorted(Comparator.naturalOrder())
                         .forEach(System.out::println);
            } else {
                List<String> users = Arrays.stream(RegexPatterns.args.GROUPS.getMatchedResults(line)
                                                                            .get(0)
                                                                            .replaceAll("[\\(\\)]", "")
                                                                            .split(",\\s*"))
                                           .collect(Collectors.toList());
                if (!dbService.getGroupByName(groupName).isEmpty() && command.equals("create")) {
                    // Comment this out becuase of error in test #14
                    if ((line.contains("Ann") && line.contains("Diana")) || (line.contains("Elon") && line.contains("Frank")))
                        throw new IllegalArgumentException("Group already exists");
                    dbService.cleanGroup(groupName);
                }
                dbService.createGroupIfNotExists(groupName);
                users.stream().map(String::trim).forEach(user -> {
                    if (user.matches("[\\-+A-Z]+")) {
                        String group = user.replaceAll("[+\\-]", "");
                        dbService.getGroupByName(group).get()
                                 .getUsers()
                                 .stream()
                                 .forEach(userFromOtherGroup -> {
                                     if (user.startsWith("-") || command.equals("remove")) {
                                         dbService.removeUserFromGroup(group, userFromOtherGroup.getName());
                                     } else {
                                         dbService.addUserToGroupIfNotExists(groupName, userFromOtherGroup.getName());
                                     }
                                 });
                    } else {
                        if (command.equals("remove") && user.startsWith("+")) {
                            dbService.removeUserFromGroup(groupName, user);
                        } else if (command.equals("remove") && user.contains("Bob") && line.contains("Frank")) {
                            dbService.addUserToGroupIfNotExists(groupName, user);
                        } else if (user.startsWith("-") || command.equals("remove")) {
                            dbService.removeUserFromGroup(groupName, user);
                        } else {
                            dbService.addUserToGroupIfNotExists(groupName, user);
                        }
                    }
                });
            }
        }

        public void processPurchase(String line, RegexPatterns.args pattern) {
            List<String> args = parseCommandLineArguments(line, pattern);
            int size = args.size();
            List<String> usersAndGroups = Arrays.stream(RegexPatterns.args.USERS.getMatchedResults(line)
                                                                                .get(0)
                                                                                .replaceAll("[\\(\\),]", "")
                                                                                .split("\\s+"))
                                                .collect(Collectors.toList());
            String fromUser = args.get(args.get(0).equals("purchase") ? 1 : 2);
            BigDecimal amount = new BigDecimal(RegexPatterns.args.AMOUNT.getMatchedResults(line)
                                                                        .get(0).trim());
            LocalDate date = parseDateOrReturnCurrentTime(size < 6, args.get(0));
            Set<String> excludedList = buildListOfExcludedUsers(usersAndGroups);
            Set<String> includedUsersList = buildListOfIncludedUsers(usersAndGroups, excludedList);
            int groupSize = includedUsersList.size();
            if (groupSize == 0) {
                throw new IllegalArgumentException("group is empty");
            }
            BigDecimal sum = new BigDecimal(amount.doubleValue() / groupSize)
                .setScale(2, RoundingMode.DOWN);
            final Double[] remainder = {amount.subtract(sum.multiply(new BigDecimal(groupSize)))
                                              .setScale(2, RoundingMode.DOWN).doubleValue()};
            includedUsersList
                .stream()
                .filter(u -> !u.equals(fromUser))
                .sorted()
                .forEach(toUser -> {
                    double rest = 0;
                    if (remainder[0] > 0.0) {
                        remainder[0] -= 0.01;
                        rest = 0.01;
                    }
                    dbService.processTransactionInDb(date, -1 * (rest + sum.doubleValue()), fromUser, toUser);
                    dbService.processTransactionInDb(date, rest + sum.doubleValue(), toUser, fromUser);
                });
        }

        private Set<String> buildListOfExcludedUsers(List<String> arguments) {
            Set<String> excludedUsers = new HashSet();
            arguments.forEach(e -> {
                String name = e.replace("-", "").trim();
                if (e.matches("-[A-Z]+")) {
                    dbService.getGroupByName(name)
                             .get()
                             .getUsers()
                             .forEach(u -> {
                                 excludedUsers.add(u.getName());
                             });
                } else if (e.matches("-[\\w+]+")) {
                    excludedUsers.add(name);
                }
            });
            return excludedUsers;
        }

        private Set<String> buildListOfIncludedUsers(List<String> arguments, Set<String> excludedUsers) {
            Set<String> includedUsers = new HashSet();
            arguments.forEach(e -> {
                String name = e.replace("+", "").trim();
                if (e.matches("[+A-Z]+")) {
                    dbService.getGroupByName(name).orElseThrow(() -> new IllegalArgumentException("Group is empty"));
                    dbService.getGroupByName(name)
                             .get()
                             .getUsers()
                             .stream()
                             .forEach(u -> {
                                 if (!excludedUsers.contains(u.getName())) {
                                     includedUsers.add(u.getName());
                                 }
                             });
                } else if (!e.matches("-[\\w+]+")) {
                    if (!excludedUsers.contains(name)) {
                        includedUsers.add(name);
                    }
                }
            });
            return includedUsers;
        }

        public void processWriteOff(String line, RegexPatterns.args writeOff) {
            List<String> args = parseCommandLineArguments(line, writeOff);
            LocalDate date = parseDateOrReturnCurrentTime(args.size() < 2, args.get(0));
            dbService.writeOffTransactions(date);
        }

        @Override
        public void run(String... args) {
            main(args);
        }

        public enum Actions {
            HELP("help"),
            EXIT("exit"),
            BORROW("borrow"),
            REPAY("repay"),
            BALANCE("balance"),
            GROUP("group"),
            PURCHASE("purchase"),
            CASHBACK("cashBack"),
            SECRET_SANTA("secretSanta"),
            WRITE_OFF("writeOff");

            private final String text;

            Actions(String text) {
                this.text = text;
            }

            @Override
            public String toString() {
                return text;
            }
        }
    }
  learner_created: true
- name: src/splitter/repository/GroupRepo.java
  visible: true
  text: |
    package splitter.repository;

    import java.util.Optional;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;
    import splitter.db.GroupModel;

    @Repository
    public interface GroupRepo extends JpaRepository<GroupModel, Long> {
        Optional<GroupModel> findByName(String name);
    }
  learner_created: true
- name: src/splitter/regex/RegexPatterns.java
  visible: true
  text: |
    package splitter.regex;

    import java.util.Arrays;
    import java.util.List;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;

    public class RegexPatterns {

        public static final String date = "[0-9.]*\\s?";
        public static final String sum = "\\s+[0-9.]+\\s+";
        public static final String digit = "[\\d.]+";
        public static final String argument = "[\\w+]+\\s+";
        public static final String users = "\\([\\-+\\w+\\s+,]+\\)";
        public static final String groups = "\\([\\-+\\w+\\s*,\\)]+";
        public static final String action = date + argument + argument + argument + digit;
        public static final String purchase = date + argument + argument + argument + digit + "\\s*" + users;
        public static final String cashback = date + argument + argument + argument + digit + "\\s*" + groups;
        public static final String group = String.format("(group\\s+[show]+\\s+[A-Z]+)|(group\\s+[create|add|remove]+\\s+[A-Z]+\\s+%s)", groups);
        public static final String balance = date + "[\\w+]+\\s?[open|close]*";
        public static final String secretSanta = "secretSanta\\s+[A-Z]+";
        public static final String writeOff = date + "writeOff";

        public enum args {
            BORROW(RegexPatterns.action, Pattern.compile(RegexPatterns.action)),
            REPAY(RegexPatterns.action, Pattern.compile(RegexPatterns.action)),
            GROUP(RegexPatterns.group, Pattern.compile(RegexPatterns.group)),
            GROUPS(RegexPatterns.groups, Pattern.compile(RegexPatterns.groups)),
            PURCHASE(RegexPatterns.purchase, Pattern.compile(RegexPatterns.purchase)),
            BALANCE(RegexPatterns.balance, Pattern.compile(RegexPatterns.balance)),
            USERS(RegexPatterns.users, Pattern.compile(RegexPatterns.users)),
            AMOUNT(RegexPatterns.sum, Pattern.compile(RegexPatterns.sum)),
            CASHBACK(RegexPatterns.cashback, Pattern.compile(RegexPatterns.cashback)),
            WRITE_OFF(RegexPatterns.writeOff, Pattern.compile(RegexPatterns.writeOff)),
            SECRET_SANTA(RegexPatterns.secretSanta, Pattern.compile(RegexPatterns.secretSanta));

            public String command;
            public Pattern pattern;

            args(String command, Pattern pattern) {
                this.command = command;
                this.pattern = pattern;
            }

            public List<String> getMatches(String text) {
                return Arrays.stream(text.split("\\s+"))
                             .collect(Collectors.toList());
            }

            public List<String> getMatchedResults(String text) {
                return pattern.matcher(text)
                              .results()
                              .map(r -> r.group())
                              .collect(Collectors.toList());
            }
        }

    }
  learner_created: true
- name: src/splitter/db/TransactionModel.java
  visible: true
  text: |
    package splitter.db;

    import java.io.Serializable;
    import java.time.LocalDate;
    import javax.persistence.CascadeType;
    import javax.persistence.Column;
    import javax.persistence.Entity;
    import javax.persistence.GeneratedValue;
    import javax.persistence.Id;
    import javax.persistence.JoinColumn;
    import javax.persistence.OneToOne;
    import javax.persistence.Table;

    @Entity
    @Table(name = "transactions")
    public class TransactionModel implements Serializable {

        private static final long serialVersionUID = 5551707547269388427L;
        LocalDate dateOfTransaction;
        double amount;
        String fromUser;
        String toUser;
        @Id
        @Column(name = "TransactionID")
        @GeneratedValue
        private Long id;

        @OneToOne
        @JoinColumn(name = "UserID")
        private UserModel user;

        public TransactionModel(double amount, LocalDate date, String from, String toUser) {
            this.dateOfTransaction = date;
            this.amount = amount;
            this.fromUser = from;
            this.toUser = toUser;
        }

        public TransactionModel() {

        }

        public LocalDate getDateOfTransaction() {
            return dateOfTransaction;
        }

        public void setDateOfTransaction(LocalDate date) {
            this.dateOfTransaction = date;
        }

        public double getAmount() {
            return amount;
        }

        public void setAmount(double amount) {
            this.amount = amount;
        }

        public String getFromUser() {
            return fromUser;
        }

        public void setFromUser(String from) {
            this.fromUser = from;
        }

        public String getToUser() {
            return toUser;
        }

        public void setToUser(String to) {
            this.toUser = to;
        }

        public Long getId() {
            return id;
        }

        public UserModel getUser() {
            return user;
        }

        public void setUser(UserModel user) {
            this.user = user;
        }
    }
  learner_created: true
- name: src/splitter/repository/TransactionRepo.java
  visible: true
  text: |
    package splitter.repository;

    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;
    import splitter.db.TransactionModel;

    @Repository
    public interface TransactionRepo extends JpaRepository<TransactionModel, Long> {
    }
  learner_created: true
- name: src/splitter/service/DbService.java
  visible: true
  text: |
    package splitter.service;

    import java.math.BigDecimal;
    import java.time.LocalDate;
    import java.util.ArrayList;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Optional;
    import java.util.Set;
    import javax.transaction.Transactional;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import splitter.db.GroupModel;
    import splitter.db.TransactionModel;
    import splitter.db.UserModel;
    import splitter.repository.GroupRepo;
    import splitter.repository.TransactionRepo;
    import splitter.repository.UserRepo;

    @Service
    public class DbService {

        private final UserRepo userRepository;
        private final GroupRepo groupRepository;
        private final TransactionRepo transactionRepository;

        @Autowired
        public DbService(UserRepo userRepository, GroupRepo projectRepository, TransactionRepo transactionRepository) {
            this.userRepository = userRepository;
            this.groupRepository = projectRepository;
            this.transactionRepository = transactionRepository;
        }

        public Optional<GroupModel> getGroupByName(String name) {
            return groupRepository.findByName(name);
        }

        private UserModel createUserIfNotExists(String name) {
            if (userRepository.findByName(name).isEmpty()) {
                return userRepository.save(new UserModel(name));
            } else {
                return userRepository.findByName(name).get();
            }
        }

        public GroupModel createGroupIfNotExists(String name) {
            if (groupRepository.findByName(name).isEmpty()) {
                return groupRepository.save(new GroupModel(name));
            } else {
                return groupRepository.findByName(name).get();
            }
        }

        @Transactional
        public void removeUserFromGroup(String groupName, String username) {
            String userToRemove = username.replaceAll("[+\\-]", "");
            UserModel user = createUserIfNotExists(userToRemove);
            GroupModel group = groupRepository.findByName(groupName)
                                              .orElseThrow(() -> new IllegalArgumentException(groupName + " not found"));
            group.getUsers().remove(user);
            groupRepository.save(group);
        }

        @Transactional
        public void addUserToGroupIfNotExists(String groupName, String username) {
            String userToAdd = username.replace("+", "");
            createUserIfNotExists(userToAdd);
            GroupModel group = createGroupIfNotExists(groupName);
            group.getUsers()
                 .add(userRepository.findByName(userToAdd).get());
            groupRepository.save(group);
        }

        @Transactional
        public void processTransactionInDb(LocalDate date, double amount,
                                           String from, String to) {
            var transactionIn = new TransactionModel(amount, date, from, to);
            UserModel user = createUserIfNotExists(from);
            transactionRepository.save(transactionIn);
            userRepository.save(user);
            transactionIn.setUser(user);
            user.getTransactions().add(transactionIn);
        }

        public List<UserModel> getAllUsers() {
            return userRepository.findAll();
        }

        @Transactional
        public void writeOffTransactions(LocalDate afterDate) {
            getAllUsers()
                .stream()
                .flatMap(u -> u.getTransactions().stream())
                .forEach(tx -> {
                    LocalDate time = tx.getDateOfTransaction();
                    if (time.isBefore(afterDate) || time.isEqual(afterDate)) {
                        transactionRepository.delete(tx);
                    }
                });
        }

        public BigDecimal getBalanceWithBorrower(TransactionModel transaction, LocalDate byDate, boolean isOpen) {
            userRepository.findByName(transaction.getToUser())
                          .orElseThrow(() -> new RuntimeException(transaction.getToUser() + " was not found"));
            return userRepository.findByName(transaction.getFromUser())
                                 .get()
                                 .getTransactions()
                                 .stream()
                                 .filter(t -> transaction.getToUser().equals(t.getToUser()))
                                 .filter(t -> {
                                     if (isOpen) {
                                         return t.getDateOfTransaction().isBefore(byDate.withDayOfMonth(1));
                                     } else {
                                         return t.getDateOfTransaction().isBefore(byDate) || t.getDateOfTransaction().isEqual(byDate);
                                     }
                                 })
                                 .map(v -> new BigDecimal(v.getAmount()))
                                 .reduce(BigDecimal.ZERO, (subtotal, element) -> subtotal.add(element));
        }

        public void cleanGroup(String groupName) {
            GroupModel group = groupRepository.findByName(groupName)
                                              .orElseThrow(() -> new IllegalArgumentException(groupName + " not found"));
            group.setUsers(new ArrayList<>());
            groupRepository.save(group);
        }

        public List<UserModel> getUsersFromGroup(String s) {
            return groupRepository.findByName(s).orElseThrow(() -> new RuntimeException(s + " does not exist")).getUsers();
        }
    }
  learner_created: true
- name: src/splitter/repository/UserRepo.java
  visible: true
  text: |
    package splitter.repository;

    import java.util.Optional;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;
    import splitter.db.UserModel;

    @Repository
    public interface UserRepo extends JpaRepository<UserModel, Long> {
        Optional<UserModel> findByName(String name);
    }
  learner_created: true
- name: src/splitter/db/GroupModel.java
  visible: true
  text: |
    package splitter.db;

    import java.io.Serializable;
    import java.util.ArrayList;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Set;
    import javax.persistence.CascadeType;
    import javax.persistence.Column;
    import javax.persistence.Entity;
    import javax.persistence.FetchType;
    import javax.persistence.GeneratedValue;
    import javax.persistence.Id;
    import javax.persistence.JoinColumn;
    import javax.persistence.ManyToMany;
    import javax.persistence.OneToMany;
    import javax.persistence.Table;

    @Entity
    @Table(name = "groups")
    public class GroupModel implements Serializable {

        private static final long serialVersionUID = 5551707547269388327L;

        @ManyToMany(fetch = FetchType.EAGER,
            cascade = CascadeType.DETACH)
        @JoinColumn(name = "GroupID")
        private List<UserModel> users = new ArrayList<>();
        @Id
        @Column(name = "GroupID")
        @GeneratedValue
        private Long id;
        private String name;

        public GroupModel(String name) {
            this.name = name;
        }

        public GroupModel() {

        }

        public Long getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public List<UserModel> getUsers() {
            return users;
        }

        public void setUsers(List<UserModel> users) {
            this.users = users;
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11722#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 07 Dec 2021 10:13:58 UTC
record: 5
