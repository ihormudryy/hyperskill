type: edu
files:
- name: src/chat/connectors/Reader.java
  visible: true
  text: |
    package chat.connectors;

    import java.io.DataInputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;
    import java.net.SocketException;
    import java.net.UnknownHostException;

    import static chat.config.Configuration.LOCALHOST;

    public class Reader extends Thread {

        private Socket socket;

        public Reader(Socket socket) throws IOException {
            this.socket = socket;
        }

        @Override
        public void run() {
            try (DataInputStream input = new DataInputStream(socket.getInputStream())) {
                while (true) {
                    try {
                        System.out.println(input.readUTF());
                    } catch (Exception e) {
                        input.close();
                        break;
                    }
                }
            } catch (Exception  e) {
            }
        }
    }
  learner_created: false
- name: src/chat/config/Configuration.java
  visible: true
  text: |
    package chat.config;

    import java.util.Random;

    public enum Configuration {

        LOCALHOST("localhost", 12345);

        String ip;
        int port;

        Configuration(String ip, int port) {
            this.ip = ip;
            this.port = port;
        }

        public String getIp() {
            return ip;
        }

        public int getPort() {
            return port;
        }
    }
  learner_created: false
- name: src/chat/client/Client.java
  visible: true
  text: |
    package chat.client;

    import chat.connectors.Reader;
    import chat.connectors.Writer;

    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;

    import static chat.config.Configuration.LOCALHOST;

    public class Client {
        public static void main(String[] args) {
            try {
                Socket socket = new Socket(InetAddress.getByName(LOCALHOST.getIp()), LOCALHOST.getPort());
                System.out.println("Client started!");
                Thread writer = new Writer(socket);
                Thread reader = new Reader(socket);
                reader.start();
                writer.start();
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ignored) {
                    socket.close();
                    try {
                        reader.interrupt();
                        System.out.println("Client reader interrupted");
                    } catch (Exception p) {
                    }
                    try {
                        writer.interrupt();
                        System.out.println("Client writer interrupted");
                    } catch (Exception x) {
                    }
                    System.out.println("Client stopped");
                }
            } catch (Exception e) {
                System.out.println("Client connection refused");
            }
        }
    }
  learner_created: false
- name: src/chat/connectors/Writer.java
  visible: true
  text: |
    package chat.connectors;

    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;
    import java.util.Scanner;

    public class Writer extends Thread {

        private Socket socket;

        public Writer(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            Scanner scanner = new Scanner(System.in);
            try {
                DataOutputStream output  = new DataOutputStream(socket.getOutputStream());
                while (true) {
                    try {
                        output.writeUTF(scanner.nextLine());
                    } catch (Exception ignored) {
                        output.close();
                        break;
                    }
                }
            } catch (Exception e) {
            }
        }
    }
  learner_created: false
- name: src/chat/server/Server.java
  visible: true
  text: |
    package chat.server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;
    import java.util.concurrent.Future;

    import static chat.config.Configuration.LOCALHOST;

    public class Server {

        private static class Session implements Runnable {

            DataInputStream input;
            DataOutputStream output;
            Socket socket;
            int connection;
            boolean isRunning = false;

            Session(ServerSocket server, int counter) throws IOException {
                connection = counter;
                socket = server.accept();
                input = new DataInputStream(socket.getInputStream());
                output  = new DataOutputStream(socket.getOutputStream());
            }

            @Override
            public void run() {
                try {
                    System.out.println("Client " + connection + " connected!");
                    while (true) {
                        String request = input.readUTF();
                        if (request.equals("/exit")) {
                            input.close();
                            output.close();
                            socket.close();
                            System.out.println("Client " + connection + " disconnected!");
                            return;
                        }
                        String response = String.format("Count is %s", request.trim().split("\\s+").length);
                        System.out.println("Client " + connection + " sent: " + request);
                        System.out.println("Sent to client " + connection + ": " + response);
                        output.writeUTF(response);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        public static void main(String[] args) {
            try (ServerSocket serverSocket = new ServerSocket(LOCALHOST.getPort(), 50,
                    InetAddress.getByName(LOCALHOST.getIp()))) {
                System.out.println("Server started!");
                ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime()
                        .availableProcessors());
                int clientCount = 1;
                List<Future<?>> sessions = new ArrayList<>();
                serverSocket.setSoTimeout(1000);
                while(clientCount < 4) {
                    try {
                        Session session = new Session(serverSocket, clientCount++);
                        executor.execute(session);
                    } catch (Exception e) {
                        executor.shutdown();
                        serverSocket.close();
                        break;
                    }
                }
            } catch (Exception e) {
                System.out.println("Server connection refused");
            }
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import static org.hyperskill.hstest.common.Utils.sleep;

    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test() {
            final TestedProgram server = new TestedProgram("chat.server");
            final TestedProgram client1 = new TestedProgram("chat.client");
            final TestedProgram client2 = new TestedProgram("chat.client");
            final TestedProgram client3 = new TestedProgram("chat.client");
            client1.setReturnOutputAfterExecution(false);
            client2.setReturnOutputAfterExecution(false);
            client3.setReturnOutputAfterExecution(false);
            final int executePause = 50;

            server.startInBackground();
            sleep(executePause);
            client1.start();
            sleep(executePause);
            client2.start();
            sleep(executePause);
            client3.start();
            sleep(executePause);
            client3.getOutput();
            client2.getOutput();

            final String client1Start = client1.getOutput().trim();
            if (!"Client started!\nServer: write your name".equals(client1Start.trim())) {
                return CheckResult.wrong("Can't get the \"Client started!\nServer: write your name\" messages");
            }

            client1.execute("First");
            sleep(executePause);

            final String client1Answer1 = client1.getOutput().trim();
            if (!client1Answer1.isEmpty()) {
                return CheckResult.wrong("Client receive a message after successful login, but shouldn't");
            }

            client1.execute("Hello all!");
            sleep(executePause);

            final String client1Answer2 = client1.getOutput().trim();
            if (client1Answer2.isEmpty() || !client1Answer2.equals("First: Hello all!")) {
                return CheckResult.wrong("Client receive wrong message");
            }


            final String client2Answer1 = client2.getOutput().trim();
            if (client2Answer1.trim().equals("First: Hello all!")) {
                return CheckResult.wrong("Client printed a message from chat before login yet!");
            }

            if (!client2Answer1.isEmpty()) {
                return CheckResult.wrong("Client printed a message before login but shouldn't");
            }

            client2.execute("Second");
            sleep(executePause);

            final String client2Answer2 = client2.getOutput().trim();
            if (!client2Answer2.equals("First: Hello all!")) {
                return CheckResult.wrong("Client should receive and print last 10 messages after login");
            }

            client3.execute("First");
            sleep(executePause);

            final String client3Answer1 = client3.getOutput().trim();
            if (client3Answer1.isEmpty() ||
                    !client3Answer1.trim().equals("Server: this name is already taken! Choose another one.")) {
                return CheckResult.wrong(
                        "Can't get the \"Server: this name is already taken! Choose another one.\" " +
                                "message after login with name that is already taken");
            }

            client3.execute("Second");
            sleep(executePause);

            final String client3Answer2 = client3.getOutput().trim();
            if (client3Answer2.isEmpty() ||
                    !client3Answer2.trim().equals("Server: this name is already taken! Choose another one.")) {
                return CheckResult.wrong(
                        "Can't get the \"Server: this name is already taken! Choose another one.\" " +
                                "message after login with name that is already taken");
            }


            client2.execute("Bye bye!");
            sleep(executePause);

            final String client1Answer3 = client1.getOutput().trim();
            final String client2Answer3 = client2.getOutput().trim();

            if (client1Answer3.isEmpty() || client2Answer3.isEmpty())
                return CheckResult.wrong("Client didn't receive a message");

            if (!client1Answer3.equals("Second: Bye bye!")
                    || !client2Answer3.equals("Second: Bye bye!")) {
                return CheckResult.wrong("Client receive a wrong message");
            }

            client2.execute("First message");
            sleep(executePause);
            client2.execute("Second message");
            sleep(executePause);
            client2.execute("Third message");
            sleep(executePause);
            client2.execute("Fourth message");
            sleep(executePause);
            client2.execute("Fifth message");
            sleep(executePause);
            client2.execute("Sixth message");
            sleep(executePause);
            client2.execute("Seventh message");
            sleep(executePause);
            client2.execute("Eighth message");
            sleep(executePause);
            client2.execute("Ninth message");
            sleep(executePause);
            client2.execute("Tenth message");
            sleep(executePause);
            client2.execute("/exit");
            sleep(executePause);

            if (!client2.isFinished()) {
                return CheckResult.wrong("Client's program should shut down after /exit command");
            }

            client3.execute("Third");
            sleep(executePause);

            final String client3Answer3 = client3.getOutput().trim();
            if (!client3Answer3.equals(
                    "Second: First message\n" +
                    "Second: Second message\n" +
                    "Second: Third message\n" +
                    "Second: Fourth message\n" +
                    "Second: Fifth message\n" +
                    "Second: Sixth message\n" +
                    "Second: Seventh message\n" +
                    "Second: Eighth message\n" +
                    "Second: Ninth message\n" +
                    "Second: Tenth message")) {
                return CheckResult.wrong("Client should receive and print 10 last messages after login");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/49/stages/268/implement#comment
status: Solved
record: 3
