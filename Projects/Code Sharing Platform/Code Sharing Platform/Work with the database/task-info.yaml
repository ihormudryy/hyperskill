type: edu
files:
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;

    @SpringBootApplication
    @RestController
    public class CodeSharingPlatform {

        public static void main(String[] args) {
            SpringApplication.run(CodeSharingPlatform.class, args);
        }

    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.3.3.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compile("org.springframework.boot:spring-boot-starter-web")
    }
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import java.util.HashMap;
    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class, "../snippets.mv.db");
        }

        final String API_CODE = "/api/code/";
        final String WEB_CODE = "/code/";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String API_LATEST = "/api/code/latest";
        final String WEB_LATEST = "/code/latest";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ...",
            "Snippet #3",
            "Snippet #4",
            "Snippet #5",
            "Snippet #6",
            "Snippet #7",
            "Snippet #8",
            "Snippet #9",
            "Snippet #10",
            "Snippet #11",
            "Snippet #12",
            "Snippet #13",
            "Snippet #14",
        };

        final Map<Integer, String> ids = new HashMap<>();
        final Map<Integer, String> dates = new HashMap<>();

        static String th(int val) {
            if (val == 1) {
                return "" + val + "st";
            } else if (val == 2) {
                return "" + val + "nd";
            } else if (val == 3) {
                return "" + val + "rd";
            } else {
                return "" + val + "th";
            }
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element getSingleTag(Element doc, String url, String tag) {
            Elements elems = getElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements getElemsByTag(Element doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Element doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            // test 1
            this::checkWebCodeNew,

            // test 2
            () -> postSnippet(0),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiLatest(0),
            () -> checkWebLatest(0),

            // test 7
            () -> postSnippet(1),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiLatest(1, 0),
            () -> checkWebLatest(1, 0),

            // test 14
            () -> postSnippet(2),
            () -> postSnippet(3),
            () -> postSnippet(4),
            () -> postSnippet(5),
            () -> postSnippet(6),
            () -> postSnippet(7),
            () -> postSnippet(8),
            () -> postSnippet(9),
            () -> postSnippet(10),
            () -> postSnippet(11),
            () -> postSnippet(12),
            () -> postSnippet(13),

            // test 26
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 54
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 56
            this::reloadServer,

            // test 57
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 85
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
        };

        private CheckResult checkApiCode(int id) {
            String codeId = ids.get(id);
            String snippet = SNIPPETS[id];

            HttpResponse resp = get(API_CODE + codeId).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", snippet)
                    .value("date", isString(s -> {
                        if (dates.containsKey(id)) {
                            return s.equals(dates.get(id));
                        }
                        dates.put(id, s);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkWebCode(int id) {
            String codeId = ids.get(id);
            String apiSnippet = SNIPPETS[id];
            String apiDate = dates.get(id);

            String req = WEB_CODE + codeId;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Code");

            Element pre = getById(doc, req, "code_snippet", "pre");
            Element code = getSingleTag(pre, req, "code");

            String webSnippetCode = code.text();
            if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, req, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            if (!html.contains("hljs.initHighlightingOnLoad()")) {
                return CheckResult.wrong(
                    "Can't determine if code highlighting works or not.\n" +
                    "Use \"hljs.initHighlightingOnLoad()\" inside the script tags in the HTML page.");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(int id) {
            String snippet = SNIPPETS[id];

            HttpResponse resp = post(API_CODE_NEW, "{\"code\":\"" + snippet + "\"}").send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isString(i -> {
                        try {
                            Integer.parseInt(i);
                        } catch (NumberFormatException ex) {
                            return false;
                        }
                        ids.put(id, "" + i);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiLatest(int... ids) {
            String req = API_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(ids.length, isObject()
                    .value("code", isString())
                    .value("date", isString())
                )
            );

            JsonArray elem = resp.getJson().getAsJsonArray();
            for (int i = 0; i < ids.length; i++) {
                JsonObject item = elem.get(i).getAsJsonObject();

                String actualSnippet = SNIPPETS[ids[i]];
                String actualDate = dates.get(ids[i]);

                String givenSnippet = item.get("code").getAsString();
                String givenDate = item.get("date").getAsString();

                if (!actualSnippet.equals(givenSnippet)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet doesn't match actual snippet.\n" +
                        "Expected:\n" + actualSnippet + "\n" +
                        "Found:\n" + givenSnippet);
                }

                if (!actualDate.equals(givenDate)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet's date doesn't match actual snippet's date.\n" +
                        "Expected:\n" + actualDate + "\n" +
                        "Found:\n" + givenDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebLatest(int... ids) {
            String req = WEB_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Latest");

            Elements preList = getElemsByTag(doc, req, "pre", ids.length);
            Elements spanList = getElemsByTag(doc, req, "span", ids.length);

            for (int i = 0; i < ids.length; i++) {
                String apiSnippet = SNIPPETS[ids[i]];
                String apiDate = dates.get(ids[i]);
                Element pre = preList.get(i);

                String webSnippetCode = pre.text();
                if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet doesn't match " + th(i + 1) + " snippet via api.\n" +
                        "Expected:\n" + apiSnippet + "\n" +
                        "Found:\n" + webSnippetCode);
                }

                Element date = spanList.get(i);
                String webSnippetDate = date.text();
                if (!webSnippetDate.trim().equals(apiDate.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet's date doesn't match " + th(i + 1)
                        + " snippet's date via api.\n" +
                        "Expected:\n" + apiDate + "\n" +
                        "Found:\n" + webSnippetDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/platform/utils/FileUtils.java
  visible: true
  text: |
    package platform.utils;

    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;

    public class FileUtils {

        public static String readFileData(String path) throws IOException {
            return new String(Files.readAllBytes(Paths.get(path)));
        }

        public static void writeDataToFile(String data, String path) throws IOException {
            FileOutputStream output = new FileOutputStream(new File(path));
            output.write(data.getBytes());
            output.close();
        }
    }
  learner_created: true
- name: src/platform/model/Code.java
  visible: true
  text: |
    package platform.model;

    import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
    import com.fasterxml.jackson.databind.annotation.JsonSerialize;
    import java.text.SimpleDateFormat;
    import java.util.Date;

    @JsonDeserialize
    @JsonSerialize
    public class Code {

        String code;
        String date;

        public Code() {
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS");
            this.date = formatter.format(new Date());
            this.code = new String();
        }

        public Code(String code, String date) {
            this.code = code;
            this.date = date;
        }

        public String getCode() {
            return code;
        }

        public void setCode(String code) {
            this.code = code;
        }

        public String getDate() {
            return date;
        }

        public void setDate(String date) {
            this.date = date;
        }

        public String toString() {
            return String.format("{\n\t\"date\": \"%s\",\n\t\"code\": \"%s\"\n}", date, code);
        }
    }
  learner_created: true
- name: bin/default/src/platform/config/MvcConfig.class
  visible: true
  text: yv66vgAAADoANgcAAgEAHXNyYy9wbGF0Zm9ybS9jb25maWcvTXZjQ29uZmlnBwAEAQAQamF2YS9sYW5nL09iamVjdAEABjxpbml0PgEAAygpVgEABENvZGUHAAkBAA9qYXZhL2xhbmcvRXJyb3IIAAsBBoVVbnJlc29sdmVkIGNvbXBpbGF0aW9uIHByb2JsZW1zOiAKCVRoZSB0eXBlIGphdmEubGFuZy5TdHJpbmcgY2Fubm90IGJlIHJlc29sdmVkLiBJdCBpcyBpbmRpcmVjdGx5IHJlZmVyZW5jZWQgZnJvbSByZXF1aXJlZCAuY2xhc3MgZmlsZXMKCVRoZSBkZWNsYXJlZCBwYWNrYWdlICJwbGF0Zm9ybS5jb25maWciIGRvZXMgbm90IG1hdGNoIHRoZSBleHBlY3RlZCBwYWNrYWdlICJzcmMucGxhdGZvcm0uY29uZmlnIgoJVGhlIGltcG9ydCBmcmVlbWFya2VyIGNhbm5vdCBiZSByZXNvbHZlZAoJVGhlIGltcG9ydCBqYXZhLmlvIGNhbm5vdCBiZSByZXNvbHZlZAoJVGhlIGltcG9ydCBvcmcgY2Fubm90IGJlIHJlc29sdmVkCglUaGUgaW1wb3J0IG9yZyBjYW5ub3QgYmUgcmVzb2x2ZWQKCVRoZSBpbXBvcnQgb3JnIGNhbm5vdCBiZSByZXNvbHZlZAoJVGhlIGltcG9ydCBvcmcgY2Fubm90IGJlIHJlc29sdmVkCglUaGUgaW1wb3J0IG9yZyBjYW5ub3QgYmUgcmVzb2x2ZWQKCVRoZSBpbXBvcnQgb3JnIGNhbm5vdCBiZSByZXNvbHZlZAoJVGhlIGltcG9ydCBvcmcgY2Fubm90IGJlIHJlc29sdmVkCglUaGUgaW1wb3J0IG9yZyBjYW5ub3QgYmUgcmVzb2x2ZWQKCVRoZSBpbXBvcnQgb3JnIGNhbm5vdCBiZSByZXNvbHZlZAoJQ29uZmlndXJhdGlvbiBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlCglFbmFibGVXZWJNdmMgY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZQoJQ29tcG9uZW50U2NhbiBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlCglJbXBsaWNpdCBzdXBlciBjb25zdHJ1Y3RvciBPYmplY3QoKSBpcyB1bmRlZmluZWQgZm9yIGRlZmF1bHQgY29uc3RydWN0b3IuIE11c3QgZGVmaW5lIGFuIGV4cGxpY2l0IGNvbnN0cnVjdG9yCglXZWJNdmNDb25maWd1cmVyIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUJlYW4gY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZQoJUHJpbWFyeSBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlCglGcmVlTWFya2VyQ29uZmlndXJhdGlvbkZhY3RvcnlCZWFuIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUlPRXhjZXB0aW9uIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUZyZWVNYXJrZXJDb25maWd1cmF0aW9uRmFjdG9yeUJlYW4gY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZQoJRnJlZU1hcmtlckNvbmZpZ3VyYXRpb25GYWN0b3J5QmVhbiBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlCglDbGFzc1RlbXBsYXRlTG9hZGVyIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUNsYXNzVGVtcGxhdGVMb2FkZXIgY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZQoJVGhlIG1ldGhvZCBnZXRDbGFzcygpIGlzIHVuZGVmaW5lZCBmb3IgdGhlIHR5cGUgTXZjQ29uZmlnCglPdmVycmlkZSBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlCglSZXNvdXJjZUhhbmRsZXJSZWdpc3RyeSBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlCglCZWFuIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUZyZWVNYXJrZXJDb25maWd1cmVyIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUZyZWVNYXJrZXJDb25maWd1cmVyIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUZyZWVNYXJrZXJDb25maWd1cmVyIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCgAIAA0MAAUADgEAFShMamF2YS9sYW5nL1N0cmluZzspVgEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAB9Mc3JjL3BsYXRmb3JtL2NvbmZpZy9NdmNDb25maWc7AQAaZ2V0RnJlZU1hcmtlckNvbmZpZ3VyYXRpb24BACYoKUxGcmVlTWFya2VyQ29uZmlndXJhdGlvbkZhY3RvcnlCZWFuOwEACkV4Y2VwdGlvbnMHABcBAAtJT0V4Y2VwdGlvbgEAG1J1bnRpbWVJbnZpc2libGVBbm5vdGF0aW9ucwEABkxCZWFuOwEACUxQcmltYXJ5OwgAHAEB91VucmVzb2x2ZWQgY29tcGlsYXRpb24gcHJvYmxlbXM6IAoJQmVhbiBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlCglQcmltYXJ5IGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUZyZWVNYXJrZXJDb25maWd1cmF0aW9uRmFjdG9yeUJlYW4gY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZQoJSU9FeGNlcHRpb24gY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZQoJRnJlZU1hcmtlckNvbmZpZ3VyYXRpb25GYWN0b3J5QmVhbiBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlCglGcmVlTWFya2VyQ29uZmlndXJhdGlvbkZhY3RvcnlCZWFuIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUNsYXNzVGVtcGxhdGVMb2FkZXIgY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZQoJQ2xhc3NUZW1wbGF0ZUxvYWRlciBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlCglUaGUgbWV0aG9kIGdldENsYXNzKCkgaXMgdW5kZWZpbmVkIGZvciB0aGUgdHlwZSBNdmNDb25maWcKAQAfUnVudGltZUludmlzaWJsZVR5cGVBbm5vdGF0aW9ucwEAE2FkZFJlc291cmNlSGFuZGxlcnMBABwoTFJlc291cmNlSGFuZGxlclJlZ2lzdHJ5OylWAQAKTE92ZXJyaWRlOwgAIgEAf1VucmVzb2x2ZWQgY29tcGlsYXRpb24gcHJvYmxlbXM6IAoJT3ZlcnJpZGUgY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZQoJUmVzb3VyY2VIYW5kbGVyUmVnaXN0cnkgY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZQoBABBmcmVlbWFya2VyQ29uZmlnAQAYKClMRnJlZU1hcmtlckNvbmZpZ3VyZXI7CAAmAQDeVW5yZXNvbHZlZCBjb21waWxhdGlvbiBwcm9ibGVtczogCglCZWFuIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUZyZWVNYXJrZXJDb25maWd1cmVyIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUZyZWVNYXJrZXJDb25maWd1cmVyIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKCUZyZWVNYXJrZXJDb25maWd1cmVyIGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGUKAQAKU291cmNlRmlsZQEADk12Y0NvbmZpZy5qYXZhAQAPTENvbmZpZ3VyYXRpb247AQAOTEVuYWJsZVdlYk12YzsBAA9MQ29tcG9uZW50U2NhbjsBABVJbmNvbnNpc3RlbnRIaWVyYXJjaHkHAC4BACJGcmVlTWFya2VyQ29uZmlndXJhdGlvbkZhY3RvcnlCZWFuBwAwAQAURnJlZU1hcmtlckNvbmZpZ3VyZXIHADIBABdSZXNvdXJjZUhhbmRsZXJSZWdpc3RyeQcANAEAEFdlYk12Y0NvbmZpZ3VyZXIBAAxNaXNzaW5nVHlwZXMAIQABAAMAAAAAAAQAAQAFAAYAAQAHAAAANAADAAEAAAAKuwAIWRIKtwAMvwAAAAIADwAAAAYAAQAAAAEAEAAAAAwAAQAAAAoAEQASAAAAAQATABQABAAVAAAABAABABYAGAAAAAoAAgAZAAAAGgAAAAcAAAA0AAMAAQAAAAq7AAhZEhu3AAy/AAAAAgAPAAAABgABAAAAFAAQAAAADAABAAAACgARABIAAAAdAAAADgACFAAAGQAAFAAAGgAAAAEAHgAfAAIAGAAAAAYAAQAgAAAABwAAADQAAwACAAAACrsACFkSIbcADL8AAAACAA8AAAAGAAEAAAAdABAAAAAMAAEAAAAKABEAEgAAAAEAIwAkAAMAGAAAAAYAAQAZAAAABwAAADQAAwABAAAACrsACFkSJbcADL8AAAACAA8AAAAGAAEAAAAkABAAAAAMAAEAAAAKABEAEgAAAB0AAAAIAAEUAAAZAAAABAAnAAAAAgAoABgAAAAOAAMAKQAAACoAAAArAAAALAAAAAAANQAAAA4ABgAtAC8AFgAxADMAAw==
  learner_created: true
- name: src/platform/config/MvcConfig.java
  visible: true
  text: |+
    package platform.config;

    import freemarker.cache.ClassTemplateLoader;
    import java.io.IOException;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.ComponentScan;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.context.annotation.Primary;
    import org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean;
    import org.springframework.web.servlet.config.annotation.EnableWebMvc;
    import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
    import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
    import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;

    @Configuration
    @EnableWebMvc
    @ComponentScan
    public class MvcConfig implements WebMvcConfigurer {

        @Bean
        @Primary
        public FreeMarkerConfigurationFactoryBean getFreeMarkerConfiguration() throws IOException {
            FreeMarkerConfigurationFactoryBean bean = new FreeMarkerConfigurationFactoryBean();
            ClassTemplateLoader ctl = new ClassTemplateLoader(getClass(), "/templates/");
            bean.setPostTemplateLoaders(ctl);
            return bean;
        }

        @Override
        public void addResourceHandlers(ResourceHandlerRegistry registry) {
            registry
                .addResourceHandler("/**")
                .addResourceLocations("classpath:/static/", "classpath:/templates/");
        }

        @Bean
        public FreeMarkerConfigurer freemarkerConfig() {
            FreeMarkerConfigurer freeMarkerConfigurer = new FreeMarkerConfigurer();
            freeMarkerConfigurer.setTemplateLoaderPath("classpath:/templates/");
            return freeMarkerConfigurer;
        }

    }


  learner_created: true
- name: src/platform/controllers/CodeController.java
  visible: true
  text: |
    package platform.controllers;

    import java.io.IOException;
    import java.text.SimpleDateFormat;
    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.util.Date;
    import java.util.LinkedList;
    import java.util.stream.Collectors;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.servlet.ModelAndView;
    import platform.model.Code;

    @Controller
    public class CodeController {

        SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy - HH:mm:ss.SSS");
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy - HH:mm:ss.SSS");

        LinkedList<Code> codes = new LinkedList<>();

        private ModelAndView getIndexPage(String page) {
            HttpHeaders responseHeaders = new HttpHeaders();
            ModelAndView modelAndView = new ModelAndView();
            responseHeaders.set("Content-Type", "text/html");
            modelAndView.setViewName(page);
            modelAndView.addAllObjects(responseHeaders);
            return modelAndView;
        }

        @GetMapping(value = "/")
        public ModelAndView getIndex() throws IOException {
            return getIndexPage("index");
        }

        @GetMapping(value = "/code/{id}")
        public String getCodePage(@PathVariable String id, Model model) {
            switch (id) {
                case "latest":
                    model.addAttribute("codes", codes.stream()
                                                            .sorted((e1, e2) -> LocalDateTime.parse(e2.getDate(), dateFormatter)
                                                                                  .compareTo(LocalDateTime.parse(e1.getDate(), dateFormatter)))
                                                            .limit(10)
                                                            .collect(Collectors.toList()));
                    model.addAttribute("title", "Latest");
                    return "code";
                case "new":
                    if (!codes.isEmpty()) {
                        model.addAttribute("code", codes.getLast());
                    } else {
                        model.addAttribute("code", new Code());
                    }
                    return "index";
                default:
                    if (Integer.parseInt(id) <= codes.size()) {
                        LinkedList<Code> tmp = new LinkedList<>();
                        tmp.add(codes.get(Integer.parseInt(id) - 1));
                        model.addAttribute("codes", tmp);
                        model.addAttribute("title", "Code");
                        return "code";
                    }
                    return "Not found!";
            }
        }

        @GetMapping(value = "/api/code/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity getCodeById(@PathVariable String id) throws IOException {
            switch (id) {
                case "latest":
                    return ResponseEntity.ok(codes.stream()
                                  .sorted((e1, e2) -> LocalDateTime.parse(e2.getDate(), dateFormatter)
                                                                   .compareTo(LocalDateTime.parse(e1.getDate(), dateFormatter)))
                                  .map(c -> c.toString())
                                  .limit(10)
                                  .collect(Collectors.joining(",\n", "[", "]")));
                default:
                    if (Integer.parseInt(id) <= codes.size()) {
                        return ResponseEntity.ok(codes.get(Integer.parseInt(id) - 1).toString());
                    }
                    return ResponseEntity.badRequest().body("not found");
            }
        }

        @PostMapping(value = "/api/code/new")
        public ResponseEntity receiveNewCode(@RequestBody Code code) throws IOException {
            code.setDate(formatter.format(new Date()));
            codes.add(code);
            return ResponseEntity.ok(String.format("{\"id\":\"%s\"}", codes.size()));
        }
    }
  learner_created: true
- name: src/resources/templates/index.ftlh
  visible: true
  text: |-
    <html>
    <head>
        <title>Create</title>
        <script src="js/script.js" type="text/javascript"></script>
        <link rel="stylesheet" href="css/styles.css">
    </head>
    <body>
        <span id="load_date">${code.date}</span>
        <br/>
        <textarea id="code_snippet">${code.code}</textarea>
        <br/>
        <button id="send_snippet" onclick="send()" type="submit">Submit</button>
    </body>
    </html>
  learner_created: true
- name: src/platform/db/CodeRepository.java
  visible: true
  learner_created: true
- name: src/platform/db/CodeService.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/130/stages/695/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 17 Jun 2021 21:11:25 UTC
record: 4
